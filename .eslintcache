[{"D:\\React JS Projects\\banner-app\\src\\index.js":"1","D:\\React JS Projects\\banner-app\\src\\App.js":"2","D:\\React JS Projects\\banner-app\\src\\components\\Toolbar\\Toolbar.js":"3","D:\\React JS Projects\\banner-app\\src\\components\\SettingsPanel\\SettingsPanel.js":"4","D:\\React JS Projects\\banner-app\\src\\components\\View\\View.js":"5","D:\\React JS Projects\\banner-app\\src\\components\\ColorPicker\\ColorPicker.js":"6"},{"size":220,"mtime":1607176731091,"results":"7","hashOfConfig":"8"},{"size":2407,"mtime":1607978681374,"results":"9","hashOfConfig":"8"},{"size":3991,"mtime":1607978043085,"results":"10","hashOfConfig":"8"},{"size":4236,"mtime":1607978095129,"results":"11","hashOfConfig":"8"},{"size":3377,"mtime":1607978013948,"results":"12","hashOfConfig":"8"},{"size":583,"mtime":1607897236735,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"cghn8m",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\React JS Projects\\banner-app\\src\\index.js",[],["29","30"],"D:\\React JS Projects\\banner-app\\src\\App.js",[],"D:\\React JS Projects\\banner-app\\src\\components\\Toolbar\\Toolbar.js",["31","32","33","34"],"import React from 'react';\r\nimport './toolbar.css';\r\n\r\nimport {useState} from 'react';\r\nimport * as htmlToImage from 'html-to-image';\r\nimport {toPng} from 'html-to-image';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\nconst Toolbar = (props) => {\r\n\r\n    const banner = {\r\n        width: props.state.width,\r\n        height: props.state.height,\r\n        color: props.state.color,\r\n        textSize: props.state.textSize,\r\n        textColor: props.state.textColor,\r\n        background: props.state.background,\r\n        font: props.state.font,\r\n        backgroundRepeat: props.state.backgroundRepeat,\r\n        backgroundPosition: props.state.backgroundPosition\r\n    }\r\n    const [urlBlock, setUrlBlock] = useState('none');\r\n    const [exportBlock, setExportBlock] = useState('none');\r\n\r\n    const exportHTML = () => {\r\n        let banner = document.querySelector('.view').innerHTML;\r\n        navigator.clipboard.writeText(banner)\r\n            .then((item)=>{\r\n                alert('Copied!')\r\n            })\r\n          .catch(err => {\r\n            alert('Something went wrong', err);\r\n          })\r\n    }\r\n    const exportJSON = () => {\r\n        let paramsJson = JSON.stringify(banner);\r\n        navigator.clipboard.writeText(paramsJson)\r\n            .then((item)=>{\r\n                alert('Copied!')\r\n            })\r\n          .catch(err => {\r\n            alert('Something went wrong', err);\r\n          })\r\n    }\r\n\r\n    const exportPng = () => {\r\n        htmlToImage.toBlob(document.querySelector('.banner'))\r\n            .then(function (blob) {\r\n                window.saveAs(blob, 'my-banner.png');\r\n            });\r\n    }\r\n\r\n    const upperCase = (T) => {\r\n        const text = document.querySelector('.banner__text');\r\n       if (text.style.textTransform === 'uppercase') \r\n       {text.style.textTransform = 'none'; T.classList.remove('active')} else {text.style.textTransform = 'uppercase'; T.classList.add('active')};\r\n       \r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n        <div className=\"toolbar\">\r\n            <div className={`toolbar__tool_settings ${props.visibility === 'visible' ? 'open': ''}`}>\r\n                <img src=\"img/125623-200.png\" className=\"toolbar-settings-img\" alt=\"\" onClick={() => props.visibility === 'hidden' ? props.changeVisibility('visible') : props.changeVisibility('hidden') }/>\r\n            </div>\r\n            <ul className=\"toolbar__tool_add\">\r\n                <li className=\"tool\"><img src=\"img/cursor.png\" onClick={()=> {(props.state.moveMode == 'none') ? props.changeMoveMode('flex') : props.changeMoveMode('none')}} className={`toolbar-cursor-img ${props.state.moveMode === 'flex' ? 'active' : ''}`} alt=\"\"/></li>\r\n                <li className=\"tool\"><img src=\"img/T.svg\" onClick={(event) => {upperCase(event.target)}} className=\"toolbar-text-img\"/></li>\r\n                <li className=\"tool\"><img src=\"img/add-img.svg\" className=\"toolbar-addimg-img\" alt=\"\" onClick={() => urlBlock === 'flex' ? setUrlBlock('none') : setUrlBlock('flex')}/></li>\r\n                <div className=\"img-url-area\" style={{display: urlBlock }}><span>URL or dataURI:</span><input type=\"text\" className=\"urlArea\" defaultValue={props.state.background} onChange={(event)=> props.changeBackground(event.target.value)}/></div>\r\n            </ul>\r\n            <div className=\"toolbar__tool_export\">\r\n                <img src=\"img/export.svg\" className=\"toolbar-export-img\" alt=\"\" onClick={() => exportBlock === 'flex' ? setExportBlock('none') : setExportBlock('flex')}/>\r\n                <div className=\"export-params\" style={{display: exportBlock}}>\r\n                    <div className=\"toolbar__export-type\" onClick={() => exportPng()}>Save PNG</div>\r\n                    <div className=\"toolbar__export-type\" onClick={() => exportHTML()}>Copy HTML</div>\r\n                    <div className=\"toolbar__export-type\" onClick={() => exportJSON()}>Copy JSON</div>\r\n                </div>    \r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Toolbar;","D:\\React JS Projects\\banner-app\\src\\components\\SettingsPanel\\SettingsPanel.js",["35","36"],"import React, { useState } from 'react';\r\nimport './settings-panel.css';\r\nimport { SketchPicker } from 'react-color';\r\n\r\nconst SettingsPanel = (props) => {\r\n    \r\n    const [display, setDisplay] = useState(false);\r\n    const [color, setColor] = useState(props.state.color);\r\n\r\n    const cpStyles = {\r\n        default: {\r\n            picker: {\r\n                position: 'absolute',\r\n                width: '70%',\r\n                left: '100%',\r\n                display: `${display}`,\r\n            }\r\n        }\r\n    }\r\n\r\n    const fonts = [\r\n        `'Roboto', sans-serif`,\r\n        `'Open Sans Condensed', sans-serif`,\r\n        `'Lato', sans-serif`,\r\n        `'Bebas Neue', cursive`\r\n    ]\r\n    const repeatValues = [\r\n        'repeat',\r\n        'no-repeat'\r\n    ]\r\n    \r\n    return(\r\n        <>\r\n        <div className={`settings-panel ${props.visibility}`}>\r\n            <span className=\"settings-panel__hs\">Size</span>   \r\n            <div className=\"size-params\">\r\n                <div className=\"width-height-params\">\r\n                    <span className=\"width-block\">W:</span><input type=\"text\"  className=\"width-value\" defaultValue={props.state.width} onChange= {(event)=>{props.changeWidth(event.target.value)}}/>\r\n                    <span className=\"height-block\">H:</span><input type=\"text\" className=\"height-value\" defaultValue={props.state.height} onChange= {(event)=>{props.changeHeight(event.target.value)}}/> \r\n                </div>\r\n                <div className=\"angle-params\">   \r\n                    <span className=\"angle-block\"><img src=\"img/angle.png\"/>: </span><input className=\"angle-value\" defaultValue={props.state.angle} onChange= {(event)=>{props.changeAngle(event.target.value)}}/>\r\n                </div> \r\n            </div>\r\n            <div className=\"settings-color\">\r\n            <span className=\"settings-panel__hs\">Color</span>\r\n                <div className=\"color-picker-area\">\r\n                    <img className=\"color-picker\" src=\"img/color-picker.svg\" onClick={()=>{setDisplay(!display)}}/>\r\n                    {display && <SketchPicker styles={cpStyles} color={color} onChange={(newColor)=>{props.changeColor(color) ; setColor(newColor.hex)}}/>}\r\n                </div>\r\n                <input type=\"text\" className=\"color-params\" defaultValue={color} onChange={(event)=>{props.changeColor(event.target.value); setColor(event.target.value)}}/>\r\n            </div>\r\n            <span className=\"settings-panel__hs\">Text</span>\r\n            <div className=\"text-params\">\r\n                <div className=\"font-style-block\">\r\n                    <span>Font:</span>\r\n                    <select onChange={(event)=>{props.changeFont(event.target.value)}} className=\"font-style-form\" name=\"menu\" size=\"1\">\r\n                    {fonts.map((item)=> <option value={item}>{item}</option>\r\n                    )}\r\n                    </select>\r\n                </div>\r\n                <span className=\"font-size-block\">Size:</span><input type=\"text\" className=\"text-value\" defaultValue={props.state.textSize} onChange= {(event)=>{props.changeTextSize(event.target.value)}}/>\r\n                <span className=\"font-size-block\">Color:</span><input type=\"text\" className=\"text-value\" defaultValue={props.state.textColor} onChange= {(event)=>{props.changeTextColor(event.target.value)}}/>\r\n            </div>\r\n            <span className=\"settings-panel__hs\">Background-image</span>\r\n            <div className=\"background-params\">\r\n                <div className=\"background-repeat-block\">\r\n                    <span>Repeat:</span>\r\n                    <select onChange={(event)=>{props.changeBackgroundRepeat(event.target.value)}} className=\"repeat-style-form\" name=\"menu\" size=\"1\">\r\n                    {repeatValues.map((item)=> <option value={item}>{item}</option>\r\n                    )}\r\n                    </select>\r\n                </div>\r\n                <span className=\"background-style-block\">Left Top:</span><input style={{width: '50%'}} type=\"text\" className=\"text-value\" defaultValue={props.state.backgroundPosition} onChange= {(event)=>{props.changeBackgroundPosition(event.target.value)}}/>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default SettingsPanel;","D:\\React JS Projects\\banner-app\\src\\components\\View\\View.js",[],"D:\\React JS Projects\\banner-app\\src\\components\\ColorPicker\\ColorPicker.js",["37"],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":6,"column":9,"nodeType":"44","messageId":"45","endLine":6,"endColumn":14},{"ruleId":"42","severity":1,"message":"46","line":7,"column":10,"nodeType":"44","messageId":"45","endLine":7,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":70,"column":101,"nodeType":"49","messageId":"50","endLine":70,"endColumn":103},{"ruleId":"51","severity":1,"message":"52","line":71,"column":38,"nodeType":"53","endLine":71,"endColumn":136},{"ruleId":"51","severity":1,"message":"52","line":42,"column":51,"nodeType":"53","endLine":42,"endColumn":77},{"ruleId":"51","severity":1,"message":"52","line":48,"column":21,"nodeType":"53","endLine":48,"endColumn":116},{"ruleId":"51","severity":1,"message":"52","line":16,"column":9,"nodeType":"53","endLine":16,"endColumn":59},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'toPng' is defined but never used.","Identifier","unusedVar","'saveAs' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]